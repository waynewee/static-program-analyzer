1 - simple Next query with statement as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p;
Select s such that Next(s, 23)
22, 24
5000
2 - simple Next query with assign as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p;
Select a such that Next(a, 23)
22
5000
3 - semantically invalid, simple Next query with procedure as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p;
Select p such that Next(p, 23)

5000
4 - simple Next query with read as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; read re;
Select re such that Next(re, 28)
27
5000
5 - simple Next query with print as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; print pr;
Select pr such that Next(pr, 28)
26
5000
6 - simple Next query with ifs as 1st param and 2nd param first line of if stmt block
stmt s; assign a; procedure p; if ifs;
Select ifs such that Next(ifs, 26)
25
5000
7 - simple Next query with ifs as 1st param and 2nd param first line of else stmt block
stmt s; assign a; procedure p; if ifs;
Select ifs such that Next(ifs, 27)
25
5000
8 - simple Next query with while as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; while w;
Select w such that Next(w, 24)
23
5000
9 - simple Next query with call as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; call c;
Select c such that Next(c, 23)
24
5000
10 - invalid, simple Next query with constant as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; constant c;
Select c such that Next(c, 24)

5000
11 - simple Next query with both param INTEGER in same block
stmt s; assign a; procedure p; if ifs;
Select BOOLEAN such that Next(23, 25)
TRUE
5000
12 - simple Next query with _ as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; if ifs;
Select s such that Next(_, 23)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
5000
13 - valid query but empty result with wildcard as 1st param and 2nd param is INTEGER first line of procedure
stmt s; assign a; procedure p; if ifs;
Select s such that Next(_, 22)

5000
14 - simple Next query with statement as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p;
Select s such that Next(22, s)
23
5000
15 - simple Next query with assign as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p;
Select a such that Next(26, a)
28
5000
16 - semantically invalid, simple Next query with procedure as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p;
Select p such that Next(22, p)

5000
17 - simple Next query with read as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p; read re;
Select re such that Next(25, re)
27
5000
18 - simple Next query with print as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p; print pr;
Select pr such that Next(25, pr)
26
5000
19 - simple Next query with ifs as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p; if ifs;
Select ifs such that Next(23, ifs)
25
5000
20 - simple Next query with while as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p; while w;
Select w such that Next(22, w)
23
5000
21 - simple Next query with wildcard as 2nd param and 1st param INTEGER
stmt s; assign a; procedure p; if ifs;
Select s such that Next(22, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
5000
22 - simple Next query with call as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; call c;
Select c such that Next(c, 23)
24
5000
23 - invalid, simple Next query with constant as 1st param and 2nd param INTEGER
stmt s; assign a; procedure p; constant c;
Select c such that Next(c, 24)

5000
24 - both param INTEGER, 1st param smaller 2nd param in procedure stmt block
stmt s; assign a; procedure p;
Select BOOLEAN such that Next(22, 23)
TRUE
5000
25 - both param INTEGER, 1st param greater 2nd param in procedure stmt block
stmt s; assign a; procedure p;
Select BOOLEAN such that Next(25, 23)
FALSE
5000
26 - both param INTEGER, both param 0, semantically invalid
stmt s; assign a; procedure p;
Select s such that Next(0, 0)

5000
27 - both param INTEGER, 1st param 0, semantically invalid
stmt s; assign a; procedure p;
Select s such that Next(0, 1)

5000
28 - both param INTEGER, 2nd param 0, semantically invalid
stmt s; assign a; procedure p;
Select s such that Next(1, 0)

5000
29 - both param INTEGER, 1st param INTEGER out of index
stmt s; assign a; procedure p;
Select s such that Next(99, 2)

5000
30 - both param INTEGER, 2nd param INTEGER out of index
stmt s; assign a; procedure p;
Select s such that Next(2, 99)

5000
31 - 1st param INTEGER out of index, 2nd param wildcard
stmt s; assign a; procedure p;
Select s such that Next(99, _)

5000
32 - 2nd param INTEGER out of index, 1st param wildcard
stmt s; assign a; procedure p;
Select s such that Next(_, 99)

5000
33 - 1st param INTEGER out of index, 2nd param synonym
stmt s; assign a; procedure p;
Select s such that Next(99, s)

5000
34 - 2nd param INTEGER out of index, 1st param synonym
stmt s; assign a; procedure p;
Select s such that Next(s, 99)

5000
35 - 1st param last line of procedure but not in while stmt block, 2nd param prog_line
prog_line n; assign a; procedure p;
Select n such that Next(14, n)

5000
36 - 1st param last line of procedure but in while stmt block, 2nd param prog_line
prog_line n; assign a; procedure p;
Select n such that Next(9, n)
5
5000
37 - both param INTEGER, 1st param greater than 2nd param, not in while stmt block
stmt s; assign a; procedure p;
Select BOOLEAN such that Next(14, 10)
FALSE
5000
38 - both param INTEGER, 1st param > 2nd param, in while stmt block
stmt s; assign a; procedure p;
Select BOOLEAN such that Next(9, 5)
TRUE
5000
39 - both param _
prog_line n; assign a; procedure p;
Select n such that Next(_, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
5000
40 - 2nd param synonym with 1st param last line of execution in if block with no statements after
prog_line n; assign a; procedure p;
Select n such that Next(16, n)

5000
41 - 2nd param synonym with 1st param last line of execution in if block with statements after
prog_line n; assign a; procedure p;
Select n such that Next(19, n)
21
5000
42 - 2nd param statement synonym with 1st param last line of execution in else block with no statements after
prog_line n; assign a; procedure p;
Select n such that Next(17, n)

5000
43 - 2nd param statement synonym with 1st param last line of execution in else block with statements after
prog_line n; assign a; procedure p;
Select n such that Next(20, n)
21
5000
44 - 1st param, parent while loop, 2nd param progline synonym, if block directly nested in while block with no stmt after while block
prog_line n;
Select n such that Next(3, n)
1
5000
45 - 1st param, parent while loop, 2nd param progline synonym, else block directly nested in while block with no stmt after while block
prog_line n;
Select n such that Next(4, n)
1
5000
46 - 1st param, parent while loop, 2nd param progline synonym, if block directly nested in while block with stmt after while block
prog_line n;
Select n such that Next(12, n)
10
5000
47 - 1st param, parent while loop, 2nd param progline synonym, else block directly nested in while block with stmt after while block
prog_line n;
Select n such that Next(13, n)
10
5000
48 - both param INTEGER from different procedures

Select BOOLEAN such that Next(1, 15)
FALSE
5000
49 - both param wildcard from different procedures
prog_line n;
Select n such that Next(_, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
5000