1 - single clause - next - synonym/wildcard
stmt s1;
Select s1 such that Next(s1, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21
5000
2 - single clause - next - wildcard/wildcard
stmt s1;
Select s1 such that Next(_, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
5000
3 - single clause - Next - synonym/constant
stmt s1, s2;
Select s1 such that Next(s1, 4)
6,8
5000
4 - single clause - next - constant/synonym
stmt s1, s2;
Select s1 such that Next(4, s1)
5,9
5000
5 - single clause - next - invalid
stmt s1, s2;
Select s3 such that Next(s1, s2)
none
5000
6 - single clause - next - empty
stmt s1, s2;
Select s1 such that Next(19, s1)
none
5000
7 - single clause - calls - synonym/wildcard
procedure p;
Select p such that Calls(p, _)
iter2, callee, goodgame, anothercaller
5000
8 - single clause - calls - wildcard/wildcard
procedure p;
Select p such that Calls(_, _)
iter2, callee, goodgame, anothercaller, someguy
5000
9 - single clause - calls - synonym/constant
procedure p;
Select p such that Calls(p,"goodgame")
callee, anothercaller
5000
10 - single clause - calls - constant/synonym
procedure p;
Select p such that Calls("goodgame", p)
someguy
5000
11 - single clause - calls - invalid
stmt s1, s2;
Select s1 such that Calls(s1, s2)
none
5000
12 - single clause - calls - empty
procedure p1, p2;
Select p2 such that Calls("someguy", _)
none
5000
13 - single clause - select tuple - two values
stmt s1, s2;
Select <s1, s2> such that Next(s1, s2)
1 2, 2 3, 3 4, 4 5, 4 9, 5 6, 5 7, 6 4, 7 8, 8 4, 9 2, 10 11, 11 12, 11 13, 12 18, 13 14, 13 16, 14 15, 15 13, 16 17, 17 18, 18 19, 20 21, 21 22
5000
14 - single clause - select tuple - three values
procedure p1, p2, p3
Select <p1, p2, p3> such that Calls(p1, p2)
iter2 callee iter, iter2 callee callee, iter2 callee goodgame, iter2 callee someguy, iter2 callee anothercaller,  callee goodgame iter2, callee goodgame callee, callee goodgame goodgame, callee goodgame someguy, callee goodgame anothercaller, goodgame someguy iter2, goodgame someguy callee, goodgame someguy goodgame, goodgame someguy someguy, goodgame someguy anothercaller, anothercallee goodgame iter2, anothercallee goodgame callee, anothercallee goodgame goodgame, anothercallee goodgame someguy, anothercallee goodgame anothercaller
5000
15 - single clause - select tuple - three values with no output
procedure p1, p2, p3
Select <p1, p2, p3> such that Calls*(_,"anothercaller")
none
5000
16 - single clause - select BOOLEAN
stmt s1, s2;
Select BOOLEAN such that Next*(s1, s2)
TRUE
5000
17 - single clause - select BOOLEAN
Select BOOLEAN such that Calls*(_, anothercaller)
FALSE
5000
18 - multiple clauses - such that
stmt s1, s2, s3;
Select s3 such that Parent(s1, s2) and Parent(s2, s3)
5
5000
19 - multiple clauses - such that
assign a; stmt s; call c;
Select c such that Parent*(s, c) and Uses(a, j) and Follows(a, c)
8
5000
20 - multiple clauses - such that with attribute
assign a; call c;
Select c.procName such that Follows*(a, c) and Follows(10, a) and Modifies(a, _)
goodgame
5000
21 - multiple clauses - such that
stmt s1, s2;
Select s1 such that Uses(s2,"j") and Next*(s2, s1)
4,5,6,7,8
5000
22 - multiple clauses - with
stmt s; constant c;
Select c with s.stmt# = c.value and c.value = 4
none
5000
23 - multiple clauses - with
assign a; prog_line n;
Select a with a.stmt# = n and n = 14 and 12 = 12
14
5000
24 - multiple clauses - with
assign a; print pr;
Select pr with a.stmt# = 18 and pr.varName ="huh"
17
5000
25 - multiple clauses - pattern
assign a;
Select a pattern a("modified", _) and a(_,"888")
none
5000
26 - multiple clauses - pattern
assign a; variable v;
Select v pattern a(v, _) and a(_, _"j"_)
j
5000
27 - multiple clauses - pattern
assign a; variable v;
Select a pattern a(v, _) and a(_, _"foo * baz"_)
7
5000
28 - multiple clauses - pattern
assign a;
Select BOOLEAN pattern a("modified", _) and a(_, _"j + 3"_)
FALSE
5000
29 - multiple clauses - select tuple
stmt s1, s2, s3; prog_line n;
Select <s1, s2> such that Parent*(s1, s2) and Uses(s1, j) with s3.stmt# = n and n = 8 such that Follows(s2, s3)
4 7, 5 7
5000
30 - multiple clauses - select boolean
assign a; stmt s1, s2
Select BOOLEAN pattern a(_, _) and a(_, _"3"_) such that Follows*(1, 2) and Parent(s1, s2) and Modifies (a, "j")
TRUE
5000
31 - multiple clauses - p/s/w
procedure p; call c; while w;
Select p such that Calls("iter2", p) and Parent (w, c) with c.procName = p. procName
callee
5000
32 - multiple clauses - p/s/w
stmt s1, s2;
Select <s1, s2, a, c, re> such that Follows(a, s1) and Parent(s2, a) with c.procName ="goodgame" pattern a(_"8"_)
8 5 7 12 19, 8 5 7 12 24, 8 5 7 16 19, 8 5 7 16 24
5000
33 - multiple clauses - p/s/w
procedure p; stmt s1, s2, s3; prog_line n; assign a;
Select p such that Parent(s1, s2) and Parent(s2, s3) with s3.stmt# = n pattern a("modified", _)
iter2, callee, goodgame, someguy, anothercaller
5000
34 - multiple clauses - p/s/w
stmt s1; call s2;
Select v.varName such that Uses(s1, v) and Modifies("iter2", v) with s2.procName ="callee" such that Parent*(s1, s2)
i, j
5000